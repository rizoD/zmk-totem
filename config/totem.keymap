//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █ nnnyyw
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <locale/keys_de.h>

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                &kp Q           &kp W    &kp E      &kp R     &kp T          &kp Y      &kp U    &kp I      &kp O    &kp P
                &kp A           &lt 3 S  &lt 1 D    &lt 4 F   &kp G          &kp H      &lt 5 J  &lt 6 K    &kp L    &kp ENTER
&sk LEFT_SHIFT  &mt LEFT_ALT Z  &kp X    &kp C      &kp V     &kp B          &kp N      &kp M    &kp COMMA  &kp DOT  &mt RIGHT_ALT SLASH  &sk LEFT_SHIFT
                                         &kp LCTRL  &kp BSPC  &lt 2 SPACE    &lt 7 TAB  &kp ESC  &kp RCTRL
            >;
        };

        mouse_layer {
            label = "MOUS";
            bindings = <
        &trans  &trans          &trans     &trans           &trans       &trans     &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans
        &trans  &msc SCRL_UP    &trans     &msc SCRL_DOWN   &trans       &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &trans  &msc SCRL_LEFT  &trans     &msc SCRL_RIGHT  &trans       &trans     &trans          &trans          &trans           &trans  &trans
                                &mkp RCLK  &mkp MCLK        &mkp LCLK    &mkp MCLK  &mkp RCLK       &trans
            >;
        };

        nav_layer {
            label = "NAVI";
            bindings = <
              &kp LS(LC(LEFT))  &kp PG_UP  &kp UP        &kp PG_DN  &kp LS(LC(RIGHT))    &trans  &kp LS(CAPS)        &kp LG(SPACE)  &kp LA(CAPS)  &kp LC(LALT)
              &kp LC(LEFT)      &kp LEFT   &kp DOWN      &kp RIGHT  &kp LC(RIGHT)        &kp L   &kp RGUI            &kp DEL        &trans        &trans
&kp LC(DOWN)  &kp CAPS          &kp HOME   &kp LC(DOWN)  &kp END    &kp LC(UP)           &trans  &kp K_CONTEXT_MENU  &trans         &trans        &trans        &trans
                                           &trans        &trans     &trans               &trans  &trans              &trans
            >;
        };

        num_layer {
            bindings = <
        &trans  &trans  &trans          &trans  &trans    &kp KP_DIVIDE        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS
        &trans  &trans  &kp KP_NUMLOCK  &trans  &trans    &kp LS(RIGHT_BRACE)  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS
&trans  &trans  &trans  &trans          &trans  &trans    &kp PERIOD           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp LS(N0)    &kp ENTER
                        &trans          &trans  &trans    &kp LS(N0)           &kp KP_NUMBER_0  &kp COMMA
            >;

            label = "NUM";
        };

        braket_layer {
            bindings = <
        &trans            &trans             &trans        &trans             &trans         &kp RA(N8)     &kp RA(N7)     &kp RA(N0)     &kp RA(N9)   &kp LS(N7)
        &kp RS(RC(LEFT))  &kp LC(BACKSPACE)  &kp DEL       &trans             &trans         &kp DE_LT  &kp LS(N8)     &kp LS(N9)     &kp RS(N0)   &kp EXCL
&trans  &trans            &trans             &trans        &trans             &trans         &kp PIPE2      &kp LS(MINUS)  &kp LS(COMMA)  &kp LS(DOT)  &kp RA(E)   &trans
                                             &kp LS(HOME)  &kp LS(LC(RIGHT))  &kp LS(END)    &trans         &trans         &trans
            >;
        };

        symbol_layer {
            bindings = <
               &kp LS(N3)    &kp RA(MINUS)  &kp LS(N7)  &kp SLASH          &kp EQUAL           &trans      &trans            &trans      &trans  &trans
               &kp PERCENT   &kp RS(PIPE)   &kp LS(N2)  &kp LS(N6)         &kp SINGLE_QUOTE    &trans      &trans            &trans      &trans  &trans
&kp LS(GRAVE)  &kp RA(RBKT)  &kp GRAVE      &kp RA(Q)   &kp BACKSLASH      &kp DOLLAR          &trans      &trans            &trans      &trans  &trans  &trans
                                            &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP     &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT
            >;
        };

        vs_layer {
            bindings = <
        &kp F12    &kp F9              &kp F10  &kp F11        &trans    &kp F1         &kp F3         &trans               &trans               &trans
        &kp LC(F)  &kp RS(RC(PERIOD))  &kp F8   &kp RS(RC(R))  &trans    &kp F7         &kp F5         &trans               &kp RC(PAUSE_BREAK)  &trans
&trans  &trans     &trans              &kp F6   &kp F4         &trans    &kp F4         &kp F2         &trans               &trans               &trans  &trans
                                       &trans   &trans         &trans    &kp RS(RC(R))  &kp RS(RC(B))  &kp RC(PAUSE_BREAK)
            >;
        };

        umlaut_layer {
            bindings = <
        &trans            &trans     &trans  &trans  &trans    &trans           &kp LEFT_BRACKET  &trans      &kp SEMI    &trans
        &kp SINGLE_QUOTE  &kp MINUS  &trans  &trans  &trans    &kp L            &kp LEFT_GUI      &kp LA(F4)  &kp LC(F4)  &kp LC(W)
&trans  &trans            &trans     &trans  &trans  &trans    &kp LS(LA(TAB))  &kp LA(TAB)       &trans      &trans      &trans     &trans
                                     &trans  &trans  &trans    &trans           &trans            &trans
            >;
        };
    };
};
