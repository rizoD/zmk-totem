//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █ nnnyyw
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <locale/keys_de.h>

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                &kp Q           &kp W    &kp E      &kp R     &kp T          &kp DE_Z      &kp U    &kp I      &kp O    &kp P
                &kp A           &lt 3 S  &lt 1 D    &lt 4 F   &kp G          &kp H      &lt 5 J  &lt 6 K    &kp L    &kp ENTER
&sk LEFT_SHIFT  &mt LEFT_ALT DE_Y  &kp X    &kp C      &kp V     &kp B          &kp N      &kp M    &kp COMMA  &kp DOT  &mt RIGHT_ALT SLASH  &sk LEFT_SHIFT
                                         &kp LCTRL  &kp BSPC  &lt 2 SPACE    &lt 7 TAB  &kp ESC  &kp RCTRL
            >;
        };

        mouse_layer {
            label = "MOUS";
            bindings = <
        &trans  &trans          &trans     &trans           &trans       &trans     &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans
        &trans  &msc SCRL_UP    &trans     &msc SCRL_DOWN   &trans       &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &trans  &msc SCRL_LEFT  &trans     &msc SCRL_RIGHT  &trans       &trans     &trans          &trans          &trans           &trans  &trans
                                &mkp RCLK  &mkp MCLK        &mkp LCLK    &mkp MCLK  &mkp RCLK       &trans
            >;
        };

        nav_layer {
            label = "NAVI";
            bindings = <
              &kp LS(LC(LEFT))  &kp PG_UP  &kp UP        &kp PG_DN  &kp LS(LC(RIGHT))    &trans  &kp LS(CAPS)        &kp LG(SPACE)  &kp LA(CAPS)  &kp LC(LALT)
              &kp LC(LEFT)      &kp LEFT   &kp DOWN      &kp RIGHT  &kp LC(RIGHT)        &kp L   &kp RGUI            &kp DEL        &trans        &trans
&kp LC(DOWN)  &kp CAPS          &kp HOME   &kp LC(DOWN)  &kp END    &kp LC(UP)           &trans  &kp K_CONTEXT_MENU  &trans         &trans        &trans        &trans
                                           &trans        &trans     &trans               &trans  &trans              &trans
            >;
        };

        num_layer {
            bindings = <
        &trans  &trans  &trans          &trans  &trans    &kp KP_DIVIDE   &kp N7  &kp N8  &kp N9  &kp KP_MINUS
        &trans  &trans  &kp KP_NUMLOCK  &trans  &trans    &kp DE_STAR     &kp N4  &kp N5  &kp N6  &kp KP_PLUS
&trans  &trans  &trans  &trans          &trans  &trans    &kp PERIOD      &kp N1  &kp N2  &kp N3  &kp DE_EQUAL    &kp ENTER
                        &trans          &trans  &trans    &kp DE_EQUAL    &kp N0  &kp COMMA
            >;

            label = "NUM";
        };

        braket_layer {
            bindings = <
        &trans            &trans             &trans        &trans             &trans         &kp DE_LBKT    &kp DE_LBRC    &kp DE_RBRC    &kp DE_RBKT   &kp DE_FSLH
        &kp RS(RC(LEFT))  &kp LC(BACKSPACE)  &kp DEL       &trans             &trans         &kp DE_LT      &kp DE_LPAR    &kp DE_RPAR    &kp DE_EQUAL  &kp EXCL
&trans  &trans            &trans             &trans        &trans             &trans         &kp DE_GT      &kp DE_QMARK   &kp DE_SEMI    &kp DE_COLON  &kp DE_EURO   &trans
                                             &kp LS(HOME)  &kp LS(LC(RIGHT))  &kp LS(END)    &kp DE_MICRO   &kp DE_SQUARE  &kp DE_CUBE
            >;
        };

        symbol_layer {
            bindings = <
             &kp DE_SECT     &kp DE_BSLH   &kp DE_SLASH   &kp DE_MINUS       &kp DE_ACUTE        &trans      &trans            &trans      &trans    &trans
             &kp DE_PERCENT  &kp DE_SQT    &kp DE_DQT     &kp DE_AMPS        &kp DE_PIPE         &trans      &trans            &kp C_RW    &kp C_FF  &trans
&kp DE_DEG   &kp DE_TILDE    &kp GRAVE     &kp DE_AT      &kp DE_POUND       &kp DE_DOLLAR       &trans      &trans            &trans      &trans    &trans  &trans
                                           &kp C_MUTE     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP     &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT
            >;
        };

        vs_layer {
            bindings = <
        &kp F12    &kp F9              &kp F10          &kp F11              &trans                 &kp F1         &kp F3         &trans               &trans               &trans
        &kp LC(F)  &kp RS(RC(PERIOD))  &kp F8           &kp RS(RC(R))        &trans                 &kp F7         &kp F5         &trans               &kp RC(PAUSE_BREAK)  &trans
&trans  &trans     &trans              &kp F6           &kp F4               &trans                 &kp F4         &kp F2         &trans               &trans               &trans  &trans
                                       &kp PRINTSCREEN  &kp LC(PRINTSCREEN)  &kp LA(PRINTSCREEN)    &kp RS(RC(R))  &kp RS(RC(B))  &kp RC(PAUSE_BREAK)
            >;
        };

        umlaut_layer {
            bindings = <
        &trans            &trans             &kp DE_EURO    &trans  &trans    &trans           &kp DE_U_UMLAUT   &trans      &kp DE_O_UMLAUT   &trans
        &kp DE_A_UMLAUT   &kp DE_CAPITAL_SZ  &trans         &trans  &trans    &kp L            &kp LEFT_GUI      &kp LA(F4)  &kp LC(F4)        &kp LC(W)
&trans  &kp DE_MICRO      &trans             &trans         &trans  &trans    &kp LS(LA(TAB))  &kp LA(TAB)       &trans      &trans            &trans     &trans
                                             &trans         &trans  &trans    &trans           &trans            &trans
            >;
        };
    };
};
